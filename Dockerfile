# === ЭТАП 1: БАЗОВЫЙ ОБРАЗ И УСТАНОВКА ЗАВИСИМОСТЕЙ ===

# За основу берем официальный образ с уже установленным Java 17.
# 'slim' - это легковесная версия, чтобы наш образ был меньше.
FROM openjdk:17-slim

# Устанавливаем рабочую директорию внутри контейнера. Все дальнейшие команды будут выполняться в ней.
WORKDIR /app

# Копируем только файлы, необходимые для скачивания зависимостей.
# Это трюк для ускорения сборки. Если эти файлы не меняются, Docker будет использовать кэш.
COPY build.gradle settings.gradle gradlew ./
COPY gradle/ gradle/

# Делаем наш gradlew исполняемым внутри контейнера
RUN chmod +x ./gradlew

# Запускаем команду, которая скачает ВСЕ зависимости проекта, но не будет выполнять тесты.
# Это позволяет закэшировать слой со всеми библиотеками.
RUN ./gradlew --no-daemon dependencies

# === ЭТАП 2: УСТАНОВКА CHROME И КОПИРОВАНИЕ КОДА ===

# Теперь копируем исходный код нашего проекта.
COPY src/ src/

# Устанавливаем Google Chrome внутри нашего контейнера.
# Это те же команды, что мы бы выполняли на чистом сервере Ubuntu/Debian.
RUN apt-get update && \
    apt-get install -y wget && \
    wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb && \
    apt-get install -y ./google-chrome-stable_current_amd64.deb && \
    rm google-chrome-stable_current_amd64.deb

# === ЭТАП 3: ОПРЕДЕЛЯЕМ КОМАНДУ ЗАПУСКА ===

# Указываем команду, которая будет выполняться по умолчанию при запуске нашего контейнера.
# Мы хотим, чтобы при запуске контейнера запускались наши тесты.
CMD ["./gradlew", "clean", "test", "--no-daemon"]